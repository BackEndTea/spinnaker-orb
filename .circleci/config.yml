version: 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.0
  spinnaker: sandbox/spinnaker@dev:alpha
  orb-tools: circleci/orb-tools@8.27.3
  spinnaker-test:
    commands:
      install-halyard:
        steps:
          - run:
              name: Install hal (debian < 10)
              command: |
                echo "deb http://deb.debian.org/debian stretch-backports main" | sudo tee -a /etc/apt/sources.list.d/stretch-backports.list
                sudo apt-get update
                curl -O https://raw.githubusercontent.com/spinnaker/halyard/master/install/debian/InstallHalyard.sh
                sudo bash InstallHalyard.sh --user $(whoami) -y
      verify-pipeline-execution:
        parameters:
          search-term:
            description: |
              Search term used to check for pipeline execution.
              Specify a value that can uniquely identify the execution.
            type: string
        steps:
          - run:
              name: Search for pipeline executions
              command: |
                APP_NAME="myapp" # This will narrow down results to only contain pipeline executions within a given application
                TRIGGER_TYPE="webhook"
                PIPELINE_SEARCH_URL="http://localhost:8084/applications/$APP_NAME/executions/search?triggerTypes=$TRIGGER_TYPE"
                curl -s $PIPELINE_SEARCH_URL | grep << parameters.search-term >>

parameters:
  run-integration-tests:
    type: boolean
    default: false
  cluster-name:
    type: string
    default: "my-eks-tests"
    #default: "spinnaker-orb-tests"

jobs:
  trigger-integration-tests:
    executor: spinnaker/default-stretch
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - run:
          name: Trigger integration workflow
          command: |
            curl -u ${CIRCLE_TOKEN}: -X POST --header "Content-Type: application/json" -d "{
              \"branch\": \"${CIRCLE_BRANCH}\",
              \"parameters\": {
                \"cluster-name\": \"<< parameters.cluster-name >>\",
                \"run-integration-tests\": true
              }
            }" "https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline"
  test-spinnaker:
    executor: spinnaker/default-stretch
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - spinnaker/install-spin:
          configure-spin: true
          generate-config: true
      - spinnaker/set-up-port-forwarding:
          pod: deck
          namespace: spinnaker
      - spinnaker/set-up-port-forwarding:
          pod: gate
          namespace: spinnaker
      - run:
          name: Test spin
          command: |
            # Wait for port forwarding to be set up
            sleep 30
            spin application list
      - spinnaker/trigger-pipeline-with-webhook:
          webhook-endpoint: "http://localhost:8084/webhooks/webhook/myappwebhook"
          payload: "{\\\"status\\\": \\\"success\\\", \\\"jobid\\\": \\\"$CIRCLE_WORKFLOW_JOB_ID\\\", \\\"message\\\": \\\"I've got it\\\"}"
      - spinnaker-test/verify-pipeline-execution:
          search-term: "$CIRCLE_WORKFLOW_JOB_ID"

workflows:
  lint-pack_validate_publish-dev:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint
      - orb-tools/pack:
          requires:
            - orb-tools/lint
      - orb-tools/publish-dev:
          orb-name: sandbox/spinnaker
          requires:
            - orb-tools/pack
          context: orb-publishing
      - trigger-integration-tests:
          cluster-name: << pipeline.parameters.cluster-name >>
          requires:
            - orb-tools/publish-dev
          context: orb-publishing

  integration-tests:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      - test-spinnaker:
          cluster-name: << pipeline.parameters.cluster-name >>
